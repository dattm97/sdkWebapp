{"version":3,"file":"static/js/309.fe571753.chunk.js","mappings":"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","sources":["features/auth/create-pin/component/CreatePin.tsx","features/auth/create-pin/component/CreatePinConfirm.tsx","features/auth/create-pin/index.ts"],"sourcesContent":["import React from 'react'\nimport Typography from '@mui/material/Typography';\nimport { Box } from '@mui/system';\n\nimport Meta from 'components/Meta';\nimport { FlexBox, FullSizeFlexBox } from 'components/styled';\nimport { useRef } from 'react';\nimport OTPInput from 'components/OTPInput';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { OTPHandle } from '../../../../components/OTPInput/types';\nimport Header from 'components/Layout/Header';\nimport { useTranslation } from 'react-i18next';\nimport { LayoutSafeArea } from 'components/Layout/LayoutSafeArea';\nimport { isValidSimple } from 'utils/format-utils';\nimport { useAppSelector } from 'app/hooks';\nimport { selectDeviceInfo } from 'app/app.slice';\nimport Image from 'mui-image';\n\nfunction CreatePin() {\n  const deviceInfo = useAppSelector(selectDeviceInfo)\n  const [searchParams] = useSearchParams();\n  const { t } = useTranslation();\n  const navigate = useNavigate()\n\n  const phone = searchParams.get('phone')\n  const activeCode = searchParams.get('activeCode')\n  const pinRef = useRef<OTPHandle>(null);\n\n  return (\n    <LayoutSafeArea>\n      <Meta title='CreatePin' />\n      <FullSizeFlexBox\n        sx={{\n          padding: 2.5,\n          paddingBottom: deviceInfo?.platform?.toUpperCase() === 'IOS' || deviceInfo?.platform?.toUpperCase() === 'ANDROID' ? 0 : 2.5,\n          paddingTop: deviceInfo?.platform?.toUpperCase() === 'IOS' || deviceInfo?.platform?.toUpperCase() === 'ANDROID' ? 0 : 2.5\n        }}\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"space-between\"\n      >\n        <Box>\n          <Header isIconBack onClick={() => navigate(-1)} />\n          <Box sx={{ paddingTop: 2.5 }} />\n          <FlexBox alignItems='center' justifyContent='flex-start'>\n            <Typography variant='h2'>{t('auth.createPayMEPin')}</Typography>\n            <Box pl={1} />\n            <Image src='images/icons/infoIcon.svg' width={24} duration={0} />\n          </FlexBox>\n          <Box sx={{ paddingTop: 0.5 }} />\n          <Typography variant='subtitle1'>{t('auth.pleaseEnterPin')}</Typography>\n          <Box sx={{ paddingTop: 9 }} />\n          <OTPInput\n            ref={pinRef}\n            id='create'\n            numOfCell={6}\n            value=''\n            isPassword\n            onFilled={(value: string | undefined) => {\n              if (value) {\n                if (isValidSimple(value)) {\n                  pinRef.current?.setErrorMessage('PayME PIN không hợp lệ. Bạn kiểm tra và nhập lại.')\n                  pinRef.current?.showError()\n                } else {\n                  navigate(`/create-pin-confirm?activeCode=${activeCode || ''}&phone=${phone || ''}&pin=${pinRef.current?.value || ''}`)\n                }\n              }\n            }} />\n        </Box>\n      </FullSizeFlexBox>\n    </LayoutSafeArea>\n  )\n}\n\nexport default CreatePin","import React from 'react'\nimport Meta from 'components/Meta';\nimport { FullSizeFlexBox } from 'components/styled';\nimport { useRef } from 'react';\nimport OTPInput from 'components/OTPInput';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { OTPHandle } from '../../../../components/OTPInput/types';\nimport Header from 'components/Layout/Header';\nimport { useTranslation } from 'react-i18next';\nimport { LayoutSafeArea } from 'components/Layout/LayoutSafeArea';\nimport { Box, Typography } from '@mui/material';\nimport { registerSagaAction } from 'features/auth/states/register/register.saga';\nimport { useAppDispatch, useAppSelector } from 'app/hooks';\nimport { selectClientId, selectDeviceInfo } from 'app/app.slice';\nimport { SHA256 } from 'crypto-js';\nimport { CallbackRegisterResponse } from 'features/auth/states/register/register.types';\nimport { updateToken } from 'features/auth/states/auth/auth.slice';\nimport alertDialogStore from 'components/AlertDialog/alertDialogStore';\nimport { bridge } from 'app/communicateBridge';\nimport { accountSagaAction } from 'features/auth/states/account/account.saga';\nimport { CallbackGetInfoResponse } from 'features/auth/states/account/account.types';\nimport { selectAccountInfo, updateAccountInfo } from 'features/auth/states/account/account.slice';\nimport { jsLog } from 'utils/comunicate';\n\nexport default function CreatePinConfirm() {\n  const deviceInfo = useAppSelector(selectDeviceInfo)\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation();\n  const clientId = useAppSelector(selectClientId)\n  const accountInfo = useAppSelector(selectAccountInfo)\n  const [searchParams] = useSearchParams();\n  const pin = searchParams.get('pin');\n  const phone = searchParams.get('phone')\n  const activeCode = searchParams.get('activeCode')\n  console.log(accountInfo);\n\n\n  const navigate = useNavigate()\n  const confirmPinRef = useRef<OTPHandle>(null)\n\n  const handleCreatePin = () => {\n    if (confirmPinRef.current?.value === pin) {\n      //Todo\n      // Đăng ký tài khoản mới\n      dispatch(registerSagaAction.register({\n        phone,\n        clientId,\n        password: SHA256(pin).toString(),\n        activeCode\n      }, (status: boolean, responseRegister: CallbackRegisterResponse) => {\n        if (status) {\n          if (responseRegister.code === 204100) {\n            dispatch(accountSagaAction.getInfo({ phone, clientId }, (status: boolean, response: CallbackGetInfoResponse) => {\n              if (status) {\n                if (response.code === 204200) {\n                  dispatch(updateToken(responseRegister.data.accessToken))\n                  dispatch(updateAccountInfo({ ...response?.data?.accountInfo, isTrustDevice: true })) //Lưu trust device\n                  // dispatch(changeStack(ROUTE_STACK.APP))\n                  bridge.next({\n                    type: 'jsPreferences',\n                    data: {\n                      accountInfo: { ...response?.data?.accountInfo, isTrustDevice: true }\n                    }\n                  })\n                  jsLog({\n                    accountInfo: response?.data?.accountInfo\n                  })\n                } else {\n                  alertDialogStore.alertContent = {\n                    title: 'Lỗi kết nối',\n                    subtitle: response.message,\n                    firstButtonTitle: 'Đã hiểu'\n                  }\n                }\n              }\n            }))\n          } else {\n            alertDialogStore.alertContent = {\n              title: 'Lỗi kết nối',\n              subtitle: responseRegister.message,\n              firstButtonTitle: 'Đã hiểu'\n            }\n          }\n        }\n      }))\n    }\n    else {\n      confirmPinRef.current?.setErrorMessage(t('auth.reEnterPinIncorrect'))\n      confirmPinRef.current?.showError()\n    }\n  }\n\n  return (\n    <LayoutSafeArea>\n      <Meta title='CreatePinConfirm' />\n      <FullSizeFlexBox\n        display=\"flex\"\n        sx={{\n          padding: 2.5,\n          paddingBottom: deviceInfo?.platform?.toUpperCase() === 'IOS' || deviceInfo?.platform?.toUpperCase() === 'ANDROID' ? 0 : 2.5,\n          paddingTop: deviceInfo?.platform?.toUpperCase() === 'IOS' || deviceInfo?.platform?.toUpperCase() === 'ANDROID' ? 0 : 2.5\n        }}\n        flexDirection=\"column\"\n        justifyContent=\"space-between\"\n      >\n        <Box>\n          <Header isIconBack onClick={() => navigate(-1)} />\n          <Box sx={{ paddingTop: 2.5 }} />\n          <Typography variant='h2'>{t('auth.confirmPin')}</Typography>\n          <Box sx={{ paddingTop: 0.5 }} />\n          <Typography variant='subtitle1'>{t('auth.reEnterPin')}</Typography>\n          <Box sx={{ paddingTop: 9 }} />\n          <OTPInput ref={confirmPinRef} id='confirm' numOfCell={6} value='' isPassword onFilled={handleCreatePin} />\n        </Box>\n      </FullSizeFlexBox>\n    </LayoutSafeArea>\n  )\n}","import CreatePin from './component/CreatePin';\nexport {default as CreatePinConfirm} from './component/CreatePinConfirm';\n\nexport default CreatePin"],"names":["deviceInfo","useAppSelector","selectDeviceInfo","useSearchParams","searchParams","t","useTranslation","navigate","useNavigate","phone","get","activeCode","pinRef","useRef","LayoutSafeArea","Meta","title","sx","padding","paddingBottom","platform","toUpperCase","paddingTop","display","flexDirection","justifyContent","Box","Header","isIconBack","onClick","alignItems","Typography","variant","pl","src","width","duration","OTPInput","ref","id","numOfCell","value","isPassword","onFilled","isValidSimple","current","setErrorMessage","showError","CreatePinConfirm","dispatch","useAppDispatch","clientId","selectClientId","accountInfo","selectAccountInfo","pin","console","log","confirmPinRef","registerSagaAction","password","SHA256","toString","status","responseRegister","code","accountSagaAction","response","updateToken","data","accessToken","updateAccountInfo","isTrustDevice","bridge","type","jsLog","alertDialogStore","subtitle","message","firstButtonTitle"],"sourceRoot":""}