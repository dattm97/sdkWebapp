{"version":3,"file":"static/js/315.b8766ec7.chunk.js","mappings":"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","sources":["features/auth/reset-pin/component/ResetPin.tsx","features/auth/reset-pin/component/ResetPinConfirm.tsx","features/auth/reset-pin/index.ts"],"sourcesContent":["import React, { useRef } from 'react';\nimport Typography from '@mui/material/Typography';\nimport { Box } from '@mui/system';\n\nimport Meta from 'components/Meta';\nimport { FullSizeFlexBox } from 'components/styled';\nimport OTPInput from 'components/OTPInput';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { OTPHandle } from 'components/OTPInput/types';\nimport Header from 'components/Layout/Header';\nimport { useTranslation } from 'react-i18next';\nimport { LayoutSafeArea } from 'components/Layout/LayoutSafeArea';\nimport { useAppSelector } from 'app/hooks';\nimport { selectDeviceInfo } from 'app/app.slice';\nimport { isValidSimple } from 'utils/format-utils';\n\nfunction ResetPin() {\n  const { t } = useTranslation()\n  const navigate = useNavigate()\n  const deviceInfo = useAppSelector(selectDeviceInfo)\n  const [searchParams] = useSearchParams()\n  const confirmCode = searchParams.get('confirmCode')\n\n  const pinRef = useRef<OTPHandle>(null);\n\n  return (\n    <LayoutSafeArea>\n      <Meta title='ResetPin' />\n      <FullSizeFlexBox\n        sx={{ \n          padding: 2.5, \n          paddingTop: deviceInfo?.platform?.toUpperCase() === 'IOS' || deviceInfo?.platform?.toUpperCase() === 'ANDROID' ? 0 : 2.5,\n          paddingBottom: deviceInfo?.platform?.toUpperCase() === 'IOS' || deviceInfo?.platform?.toUpperCase() === 'ANDROID' ? 0 : 2.5\n        }}\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"space-between\"\n      >\n        <Box>\n          <Header isIconBack onClick={() => navigate(-1)} />\n          <Box sx={{ paddingTop: 2.5 }} />\n          <Typography variant='h2'>{t('auth.createNewPayMEPin')}</Typography>\n          <Box sx={{ paddingTop: 0.5 }} />\n          <Typography variant='subtitle1' color='text.subtitle'>{t('auth.pleaseEnterPin')}</Typography>\n          <Box sx={{ paddingTop: 9 }} />\n          <OTPInput\n            ref={pinRef}\n            id='create'\n            isPassword\n            numOfCell={6}\n            value=''\n            onFilled={(value: string | undefined) => {\n              if (value) {\n                if (isValidSimple(value)) {\n                  pinRef.current?.setErrorMessage('PayME PIN không hợp lệ. Bạn kiểm tra và nhập lại.')\n                  pinRef.current?.showError()\n                } else {\n                  navigate(`/reset-pin-confirm?confirmCode=${confirmCode || ''}&pin=${pinRef.current?.value || ''}`)\n                }\n              }\n            }}\n          />\n        </Box>\n      </FullSizeFlexBox>\n    </LayoutSafeArea>\n  )\n}\n\nexport default ResetPin","import React, { useRef } from 'react'\nimport Typography from '@mui/material/Typography';\nimport { Box } from '@mui/system';\n\nimport Meta from 'components/Meta';\nimport { FullSizeFlexBox } from 'components/styled';\nimport OTPInput from 'components/OTPInput';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { OTPHandle } from 'components/OTPInput/types';\nimport Header from 'components/Layout/Header';\nimport { useTranslation } from 'react-i18next';\nimport { LayoutSafeArea } from 'components/Layout/LayoutSafeArea';\nimport { Slide } from '@mui/material';\nimport { useAppDispatch, useAppSelector } from 'app/hooks';\nimport { selectClientId, selectDeviceInfo } from 'app/app.slice';\nimport { authSagaAction } from 'features/auth/states/auth/auth.saga';\nimport { selectAccountInfo } from 'features/auth/states/account/account.slice';\nimport { CallbackLoginResponse, CallbackUpdatePinResponse } from 'features/auth/states/auth/auth.types';\nimport { SHA256 } from 'crypto-js';\nimport { updateToken } from 'features/auth/states/auth/auth.slice';\nimport alertDialogStore from 'components/AlertDialog/alertDialogStore';\n\nfunction ResetPinConfirm() {\n  const dispatch = useAppDispatch()\n  const deviceInfo = useAppSelector(selectDeviceInfo)\n  const accountInfo = useAppSelector(selectAccountInfo)\n  const clientId = useAppSelector(selectClientId)\n  const { t } = useTranslation()\n  const [searchParams] = useSearchParams();\n  const pin = searchParams.get('pin');\n  const confirmCode = searchParams.get('confirmCode')\n  const navigate = useNavigate();\n  const confirmPinRef = useRef<OTPHandle>(null)\n\n  const handleChangePin = () => {\n    if (confirmPinRef.current?.value === pin) {\n      //Todo\n      dispatch(authSagaAction.updatePin({\n        phone: accountInfo?.phone,\n        clientId,\n        password: SHA256(pin).toString(),\n        confirmCode\n      }, (status: boolean, response: CallbackUpdatePinResponse) => {\n        if (status) {\n          if (response.code === 200308) {\n            dispatch(authSagaAction.login({\n              activeCode: '',\n              phone: accountInfo?.phone,\n              password: SHA256(pin).toString(),\n              clientId,\n            }, (status: boolean, response: CallbackLoginResponse) => {\n              if (status) {\n                if (response.code === 200000) {\n                  dispatch(updateToken(response.data.accessToken))\n\n                  navigate('/home', { replace: true })\n                } else if (response.code === 200011) {\n                  alertDialogStore.alertContent = {\n                    title: 'Tạm khoá PayME PIN',\n                    subtitle: response.message,\n                    firstButtonTitle: 'Đã hiểu'\n                  }\n                } else {\n                  confirmPinRef.current?.setErrorMessage(response.message)\n                  confirmPinRef.current?.showError?.()\n                }\n              } else {\n                alertDialogStore.alertContent = {\n                  title: 'Lỗi kết nối',\n                  subtitle: response.message,\n                  firstButtonTitle: 'Đã hiểu'\n                }\n              }\n            }))\n          } else {\n            confirmPinRef.current?.setErrorMessage(response.message)\n            confirmPinRef.current?.showError?.()\n          }\n        } else {\n          alertDialogStore.alertContent = {\n            title: 'Lỗi kết nối',\n            subtitle: response.message,\n            firstButtonTitle: 'Đã hiểu'\n          }\n        }\n      }))\n    }\n    else {\n      confirmPinRef.current?.setErrorMessage('PayME PIN mới không được trùng mã hiện tại.')\n      confirmPinRef.current?.showError()\n    }\n  }\n\n  return (\n    <LayoutSafeArea>\n      <Meta title='ResetPinConfirm' />\n      <Slide in timeout={500} direction='left'>\n        <FullSizeFlexBox\n          sx={{\n            padding: 2.5,\n            paddingTop: deviceInfo?.platform?.toUpperCase() === 'IOS' || deviceInfo?.platform?.toUpperCase() === 'ANDROID' ? 0 : 2.5,\n            paddingBottom: deviceInfo?.platform?.toUpperCase() === 'IOS' || deviceInfo?.platform?.toUpperCase() === 'ANDROID' ? 0 : 2.5\n          }}\n          display=\"flex\"\n          flexDirection=\"column\"\n          justifyContent=\"space-between\"\n        >\n          <Box>\n            <Header isIconBack onClick={() => navigate(-1)} />\n            <Box sx={{ paddingTop: 2.5 }} />\n            <Typography variant='h2'>{t('auth.confirmNewPin')}</Typography>\n            <Box sx={{ paddingTop: 0.5 }} />\n            <Typography variant='subtitle1' color='text.subtitle'>{t('auth.reEnterPin')}</Typography>\n            <Box sx={{ paddingTop: 9 }} />\n            <OTPInput ref={confirmPinRef} id='confirm' isPassword numOfCell={6} value='' onFilled={handleChangePin} />\n          </Box>\n        </FullSizeFlexBox>\n      </Slide>\n    </LayoutSafeArea>\n  )\n}\n\nexport default ResetPinConfirm","import ResetPin from './component/ResetPin';\nexport {default as ResetPinConfirm} from './component/ResetPinConfirm'\n\nexport default ResetPin"],"names":["t","useTranslation","navigate","useNavigate","deviceInfo","useAppSelector","selectDeviceInfo","useSearchParams","confirmCode","get","pinRef","useRef","LayoutSafeArea","Meta","title","sx","padding","paddingTop","platform","toUpperCase","paddingBottom","display","flexDirection","justifyContent","Box","Header","isIconBack","onClick","Typography","variant","color","OTPInput","ref","id","isPassword","numOfCell","value","onFilled","isValidSimple","current","setErrorMessage","showError","dispatch","useAppDispatch","accountInfo","selectAccountInfo","clientId","selectClientId","searchParams","pin","confirmPinRef","Slide","in","timeout","direction","authSagaAction","phone","password","SHA256","toString","status","response","code","activeCode","updateToken","data","accessToken","replace","alertDialogStore","subtitle","message","firstButtonTitle"],"sourceRoot":""}